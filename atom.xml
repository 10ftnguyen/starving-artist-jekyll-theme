<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.2.1">Jekyll</generator><link href="https://chrisanthropic.github.io/starving-artist-jekyll-theme/atom.xml" rel="self" type="application/atom+xml" /><link href="https://chrisanthropic.github.io/starving-artist-jekyll-theme/" rel="alternate" type="text/html" /><updated>2016-09-04T14:23:34-07:00</updated><id>https://chrisanthropic.github.io/starving-artist-jekyll-theme/</id><title>Starving Artist Jekyll Theme</title><subtitle>Witty description here.</subtitle><author><name>Chrisanthropic</name></author><entry><title>Sample post with thumbnail</title><link href="https://chrisanthropic.github.io/starving-artist-jekyll-theme/blog/2016/sample-post-with-thumbnail" rel="alternate" type="text/html" title="Sample post with thumbnail" /><published>2016-08-14T00:00:00-07:00</published><updated>2016-08-14T00:00:00-07:00</updated><id>https://chrisanthropic.github.io/starving-artist-jekyll-theme/blog/2016/sample-post-with-thumbnail</id><content type="html" xml:base="https://chrisanthropic.github.io/starving-artist-jekyll-theme/blog/2016/sample-post-with-thumbnail">Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.

Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem.

Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?

At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod maxime placeat facere</content><author><name>Chrisanthropic</name></author><summary>Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.</summary></entry><entry><title>Using _data to Build Jekyll Navigation</title><link href="https://chrisanthropic.github.io/starving-artist-jekyll-theme/blog/2014/using-_data-to-build-jekyll-navigation" rel="alternate" type="text/html" title="Using _data to Build Jekyll Navigation" /><published>2014-12-09T00:00:00-08:00</published><updated>2014-12-09T00:00:00-08:00</updated><id>https://chrisanthropic.github.io/starving-artist-jekyll-theme/blog/2014/using-_data-to-build-jekyll-navigation</id><content type="html" xml:base="https://chrisanthropic.github.io/starving-artist-jekyll-theme/blog/2014/using-_data-to-build-jekyll-navigation">I wanted an easy way to create my navigation menus and I found a great post [here](http://www.tournemille.com/blog/How-to-create-data-driven-navigation-in-Jekyll/) on using the new-ish 'data' feature of Jekyll.

What this allows us to do is centralize our navigation setup (pages and subpages) so any changes are kept out of our actual layout code.

Here's what I did:

* Add a new file called `nav.yml` in your _data directory
  * Create the _data directory if it doesn't already exist
* Paste this template into `_data/nav.yml` and edit it to fit your needs

```
- title: &quot;Home&quot;
  href: &quot;/&quot;

- title: &quot;Blog&quot;
  href: &quot;/blog/&quot;

- title: &quot;Misc&quot;
  subcategories:
    - subtitle: &quot;Example&quot;
      subhref: &quot;#&quot;
    - subtitle: &quot;Example2&quot;
      subhref: &quot;#&quot;
```

* Edit your `_includes/naviation.html` to match the following

```
{% raw %}
&lt;nav class=&quot;animenu&quot;&gt;	
  &lt;input type=&quot;checkbox&quot; id=&quot;button&quot;&gt;
  &lt;label for=&quot;button&quot; onclick&gt;Menu&lt;/label&gt; 
  &lt;ul&gt;
    {% for nav in site.data.nav %}
      {% if nav.subcategories != null %}
	&lt;li&gt;
	  &lt;a href=&quot;{{ site.url }}{{ nav.url }}&quot;&gt;{{ nav.title }} &amp;#x25BC;&lt;/a&gt;
	  &lt;ul&gt;
	    {% for subcategory in nav.subcategories %}
	      &lt;li&gt;&lt;a href=&quot;{{ site.url }}{{ subcategory.subhref }}&quot;&gt;{{ subcategory.subtitle }}&lt;/a&gt;&lt;/li&gt;
	    {% endfor %}
	  &lt;/ul&gt;
	{% elsif nav.title == page.title %}
	  &lt;li class=&quot;active&quot;&gt;&lt;a href=&quot;{{ nav.url }}&quot;&gt;{{ nav.title }}&lt;/a&gt;&lt;/li&gt;
	{% else %} 
	&lt;li&gt;
	  &lt;a href=&quot;{{ site.url }}{{ nav.href }}&quot;&gt;{{ nav.title }}&lt;/a&gt;&lt;/li&gt;
      {% endif %}
    {% endfor %}
  &lt;/ul&gt;
&lt;/nav&gt; 
{% endraw %}
```

Now any time you want to update your navigation just edit the `_data/nav.yml` file and rebuild your site.</content><author><name>Chrisanthropic</name></author><summary>I wanted an easy way to create my navigation menus and I found a great post here on using the new-ish ‘data’ feature of Jekyll.</summary></entry><entry><title>Integrating Compass and Jekyll Without Plugins</title><link href="https://chrisanthropic.github.io/starving-artist-jekyll-theme/blog/2014/integrating-compass-and-jekyll-without-plugins" rel="alternate" type="text/html" title="Integrating Compass and Jekyll Without Plugins" /><published>2014-12-09T00:00:00-08:00</published><updated>2014-12-09T00:00:00-08:00</updated><id>https://chrisanthropic.github.io/starving-artist-jekyll-theme/blog/2014/integrating-compass-and-jekyll-without-plugins</id><content type="html" xml:base="https://chrisanthropic.github.io/starving-artist-jekyll-theme/blog/2014/integrating-compass-and-jekyll-without-plugins">I find myself getting closer to the point where I'm done with the scaffolding and can finally start with the design. The more fun stuff I look at the more I realize that integrating Compass is probably a good idea.

I don't like plugins unless absolutely necessarry so while I'm sure the jekyll-compass plugin is great, I decided to figure out how to add Compass to my Jekyll/Octopress 3 site without any plugins.

Here's what I did.

* Add compass to your gemfile
* Install compass
  `bundle install --binstubs --path=vendor`
* Run Compass for the first time so it generates a config file
  `bundle exec compass create --bare --sass-dir &quot;_sass&quot; --css-dir &quot;css&quot; --images-dir &quot;images&quot;`
  * This command creates a config.rb file wiht compass settings that are compatible with Jekyll
* Move the default Jekyll css/main.css to _sass/main.css
  * remove the yaml frontmatter from the file once you've moved it to the _sass directory
* Delete the css directory
* Update rakefile to run compass compile before building

```
desc &quot;build the site&quot;
task :build do
  system &quot;bundle exec compass compile&quot;
  system &quot;bundle exec jekyll build&quot;
  system &quot;bundle exec rake minify_html&quot;
  system &quot;bundle exec rake optimizeimages&quot;
end
```
* Run `bundle exec rake build`
* NOTE - compression settings are no longer set in _config.yml, you'll need to add the following line to `config.rb` in oroder to compress css
  `output_style = :compressed`

* Update rakefile to run compass watch and jekyll serve together

```
##############
#   Develop  #
##############

# Useful for development
# It watches for chagnes and updates when it finds them

desc &quot;Watch the site and regenerate when it changes&quot;
task :watch do
  puts &quot;Starting to watch source with Jekyll and Compass.&quot;
  system &quot;compass compile&quot; unless File.exist?(&quot;css/main.css&quot;)
  system &quot;jekyll build&quot;
  jekyllPid = Process.spawn(&quot;jekyll serve --watch&quot;)
  compassPid = Process.spawn(&quot;compass watch&quot;)

  trap(&quot;INT&quot;) {
    [jekyllPid, compassPid].each { |pid| Process.kill(9, pid) rescue Errno::ESRCH }
    exit 0
  }

  [jekyllPid, compassPid].each { |pid| Process.wait(pid) }
end
```
* Now you can run `bundle exec rake watch` and it runs compass watch &amp; jekyll serve together.

Now you can use Compass mixins and import partials by adding `@import compass/blahblahblah` to your _sass/main.scss file.
Running `bundle exec rake build` will then run `compass compile` to create your css/main.scss file, followed by `jekyll build` which will move that css/main.scss to _site/css/main.css

In short:

* you can store any partials you want to in the _sass directory (or subdirectories)
* you can import these partials via your main.scss file
* any partials imported will be compiled into a single file (css/main.scss) when you run `compass compile`
* the css/main.scss file will be built into _site/css/main.css when you run `jekyll build`
* any partials not imported by your _sass/main.scss file will not be used</content><author><name>Chrisanthropic</name></author><summary>I find myself getting closer to the point where I’m done with the scaffolding and can finally start with the design. The more fun stuff I look at the more I realize that integrating Compass is probably a good idea.</summary></entry><entry><title>Integrating the Foundation Zurb Grid With Jekyll</title><link href="https://chrisanthropic.github.io/starving-artist-jekyll-theme/blog/2014/integrating-the-foundation-zurb-grid-with-jekyll" rel="alternate" type="text/html" title="Integrating the Foundation Zurb Grid With Jekyll" /><published>2014-12-08T00:00:00-08:00</published><updated>2014-12-08T00:00:00-08:00</updated><id>https://chrisanthropic.github.io/starving-artist-jekyll-theme/blog/2014/integrating-the-foundation-zurb-grid-with-jekyll</id><content type="html" xml:base="https://chrisanthropic.github.io/starving-artist-jekyll-theme/blog/2014/integrating-the-foundation-zurb-grid-with-jekyll">I was playing with the idea of using Bourbon Neat to create a semantic grid but when it comes down to it I'm familiar with Zurb and I like how it works.

I make a decent amount of sites for friends and non-profits and the benefits of Zurbs rapid prototyping are worth it for me.

That being said, I use very little of Zurb's stuff so for now I'm just starting with the grid and visibility classes. Here's how I did it.

### With Compass
This is an update to my original post since I've started using Compass. If you don't use Compass you can still follow the instructions in the 'Without Compass' section.

* clone the bower-foundation repo into your _sass directory
  `git clone git@github.com:zurb/bower-foundation.git`
* create a new subdirectory in your _sass directory called `foundation`
* copy the contents of `bower-foundation/scss/foundation` to your new subdirectory
  * this should include `_functions.scss`, `_settings.scss`, and a directory named `components`
* You can now @import any of the zurb scss stuff from your `css/main.scss` file. For now I'm just importing the grid and visibility:

```
@import &quot;foundation/components/grid&quot;;
@import &quot;foundation/components/visibility&quot;;
```

  * Note - grid will automatically @import `foundation/components/global` which @imports `foundation/components/fuctions

### Without Compass
Here's the first way I did it, before I integrated compass into my Jekyll site.

* Create a folder in your _sass directory called 'foundation'
* Git clone the 'bower_foundation' repo anywhere on your computer
  `git clone git@github.com:zurb/bower-foundation.git`
* Copy the contents of `bower-foundation/scss/foundation/components/` to the `_sass/foundation` directory you created in step 1.
* Copy `bower-foundation/scss/foundation/_functions.scss` to the `_sass/foundation` directory.
* Open `_sass/foundation/global.scss` and edit the `@import ../&quot;functions&quot;;` line to read `@import &quot;functions&quot;` since we moved it into the same directory.
* Delete the `bower-foundation` directory, you don't need it anymore.
* You can now @import any of the zurb scss stuff from your `css/main.scss` file. For now I'm just importing the grid and visibility:

```
@import &quot;foundation/grid&quot;;
@import &quot;foundation/visibility&quot;;
```

  * Note - grid will automatically @import `foundation/global` which @imports `foundation/fuctions`

That's it. Now you have access to Zurb's grid without any of the JS or other crap that you don't need. You can update at any time by replacing the contents of `_sass/foundation` with the newest files from the zurb `bower-foundation` repo.</content><author><name>Chrisanthropic</name></author><summary>I was playing with the idea of using Bourbon Neat to create a semantic grid but when it comes down to it I’m familiar with Zurb and I like how it works.</summary></entry><entry><title>Deploy Jekyll to S3 With S3_website</title><link href="https://chrisanthropic.github.io/starving-artist-jekyll-theme/blog/2014/deploy-jekyll-to-s3-with-s3_website" rel="alternate" type="text/html" title="Deploy Jekyll to S3 With S3_website" /><published>2014-12-05T00:00:00-08:00</published><updated>2014-12-05T00:00:00-08:00</updated><id>https://chrisanthropic.github.io/starving-artist-jekyll-theme/blog/2014/deploy-jekyll-to-s3-with-s3_website</id><content type="html" xml:base="https://chrisanthropic.github.io/starving-artist-jekyll-theme/blog/2014/deploy-jekyll-to-s3-with-s3_website">I'd originally set this up to deploy to S3 using the new-ish Octopress-Deploy gem but after using it a bit I've found that it's still too rough to be my goto.

The main benefits of switching to S3_website are:

* Incremental deploy. It only pushes files that have been updated.
* Proper metadata. Octopress-deploy marked all of my files as `Content-Type: image/jpeg` 
* Caching. Setting max-age is very simple with this plugin.
* Gzip. The plugin can automatically compress the files before pushing it to S3. This makes things load faster and reduces your bandwidth costs.

Below are the steps I took to migrate from `octopress-deploy` to [S3_website](https://github.com/laurilehmijoki/s3_website).

* First I added `s3_website.yml` to .gitignore since it'll hold our S3 credentials and we don't want those public.
* add s3_website to Gemfile
* Install the gem by running `bundle install --binstubs --path=vendor`
* Create the default config by running `bundle exec s3_website cfg create`
* add your S3 credentials to `s3_config.yml`
* **GZIP** add `gzip: true` to `s3_website.yml`
* **CACHE** Update max-age in `s3_website.yml`
```
max_age:
  &quot;css/*&quot;: 604800
  &quot;*&quot;: 300
```
* update Rakefile build command to `system &quot;bundle exec s3_website push&quot;`
* bundle exec rake build
* run the initial push with the --force flag just to make sure it updates cache metadata for all files
  `bundle exec s3_website push --force`
* Login to Cloudflare and purge the cache to make sure your serving up your new gzip/cache files

From now on you can run `bundle exec rake deploy` and the S3_website plugin will compress all of your files, add cache headers to them, and push any that have changed to your S3 bucket.</content><author><name>Chrisanthropic</name></author><summary>I’d originally set this up to deploy to S3 using the new-ish Octopress-Deploy gem but after using it a bit I’ve found that it’s still too rough to be my goto.</summary></entry><entry><title>An S3 Policy to Block Semalt Referral Traffic</title><link href="https://chrisanthropic.github.io/starving-artist-jekyll-theme/blog/2014/an-s3-policy-to-block-semalt-referral-traffic" rel="alternate" type="text/html" title="An S3 Policy to Block Semalt Referral Traffic" /><published>2014-12-05T00:00:00-08:00</published><updated>2014-12-05T00:00:00-08:00</updated><id>https://chrisanthropic.github.io/starving-artist-jekyll-theme/blog/2014/an-s3-policy-to-block-semalt-referral-traffic</id><content type="html" xml:base="https://chrisanthropic.github.io/starving-artist-jekyll-theme/blog/2014/an-s3-policy-to-block-semalt-referral-traffic">A lot of people have noticed shit tons of ferferral spam from semalt.com and their various other domains.

It's fucking annoying.

I found a short S3 policy [here](http://admium.tumblr.com/) that blocked semalt.com from accessing static sites hosted on S3 and adapted it to include larger list of all know semalt.com domains as well as some from my logs.

I created a repo for the policy and you can find it [here](https://github.com/chrisanthropic/S3-semalt-blocklist-policy).

### About
The policy blocks variations and subdomains of the given sites: ie `semalt.com`, `semalt.com/anything`, `randomstringsemalt.com`, `www.semalt.com`, `www.semalt.com/anything`

### Use
Copy and past the contents of [blocklist.txt](https://raw.githubusercontent.com/chrisanthropic/S3-semalt-blocklist-policy/master/Policy.txt) to your S3 bucket policy and change the two instances of `YOURBUCKETNAME` to the actual name of your bucket.

### Blocklist
The following sites are blocked:

  * semalt.com
  * backgroundpictures.net
  * baixar-musicas-gratis.com
  * buttons-for-website.com
  * darodar.com
  * descargar-musica-gratis.net
  * embedle.com
  * extener.com
  * extener.org
  * fbdownloader.com
  * fbfreegifts.com
  * feedouble.com
  * feedouble.net
  * japfm.com
  * joinandplay.me
  * joingames.org
  * kambasoft.com
  * musicprojectfoundation.com
  * myprintscreen.com
  * openfrost.com
  * openfrost.net
  * openmediasoft.com
  * pictureframingperth.net.au
  * savetubevideo.com
  * serw.clicksor.com
  * sharebutton.net
  * softomix.com
  * softomix.net
  * softomix.ru
  * soundfrost.org
  * srecorder.com
  * star61.de
  * torontoplumbinggroup.com
  * vapmedia.org
  * videofrost.com
  * youtubedownload.org
  * zazagames.org</content><author><name>Chrisanthropic</name></author><summary>A lot of people have noticed shit tons of ferferral spam from semalt.com and their various other domains.</summary></entry><entry><title>Rakefile: Minimize Assets and Optimize Images</title><link href="https://chrisanthropic.github.io/starving-artist-jekyll-theme/blog/2014/rakefile-minimize-assets-and-optimize-images" rel="alternate" type="text/html" title="Rakefile: Minimize Assets and Optimize Images" /><published>2014-12-04T00:00:00-08:00</published><updated>2014-12-04T00:00:00-08:00</updated><id>https://chrisanthropic.github.io/starving-artist-jekyll-theme/blog/2014/rakefile-minimize-assets-and-optimize-images</id><content type="html" xml:base="https://chrisanthropic.github.io/starving-artist-jekyll-theme/blog/2014/rakefile-minimize-assets-and-optimize-images">I used Octopress to build my wife's webcomic site [ShamseeComic](http://www.shamseecomic.com) and learning how to optimize everything has been fun.

Now that I'm starting on this site from scratch (with a better understanding of Jekyll) I figured I'd revisit my old method and update it.

Below are the steps I took to add a few optimization tasks to my blank Rakefile. Here's the tasks:

* Minify all HTML and CSS when the site is built
* Optimize all images when the site is built
* Notify Google and Yahoo when the site is deployed
  * This one took me a bit, but I was trying to reproduce the 'Ping Service' that's included in Wordpress

### _config.yml
Jekyll 2.0+ has full Sass support so we can use it to minify our CSS when Jekyll builds the site, just by adding a couple of lines to our _config.yml.

```
# Compress our CSS
  sass:
    style: :compressed
```

### Gemfile

* First I add some gems to my Gemfile since they're used for the minification and optimization
```
gem 'mini_magick'
gem 'html_compressor'
```
* Then install the new Gems by running `bundle install --binstubs --path=vendor`
* Next I create a Rakefile with the following:

```
require &quot;html_compressor&quot;

##############
#   Build    #
##############

# Generate the site
# Minify, optimize, and compress

desc &quot;build the site&quot;
task :build do
  system &quot;bundle exec jekyll build&quot;
  system &quot;bundle exec rake minify_html&quot;
  system &quot;bundle exec rake optimizeimages&quot;
end

##############
#   Deploy   #
##############

# Deploy the site
# Ping / Notify after site is deployed

desc &quot;deploy the site&quot;
task :deploy do
  system &quot;bundle exec octopress deploy&quot;
  system &quot;bundle exec rake notify&quot;
end

##############
# Optimizes  #
##############

# https://github.com/phobetron/image-optimizer 
# Using this to optimize our images. Dependencies are jpegtran, pngcrush and gifsicle

desc &quot;Optimize GIF, JPG and PNG files&quot;
task :optimizeimages =&gt; [ 'optimizeimages:find_tools', 'optimizeimages:run' ]

namespace :optimizeimages do
  desc &quot;Test for presence of image optimization tools in the command path&quot;
  task :find_tools do
    RakeFileUtils.verbose(false)
    tools = %w[jpegtran gifsicle pngcrush]
    puts &quot;\nOptimizing images using the following tools:&quot;
    tools.delete_if { |tool| sh('which', tool) rescue false }
    raise &quot;The following tools must be installed and accessible from the execution path: #{ tools.join(', ') }&quot; if tools.size &gt; 0
  end

  task :run do
    RakeFileUtils.verbose(false)
    start_time = Time.now

    file_list = FileList.new '_site/**/*.{gif,jpeg,jpg,png}'

    last_optimized_path = '_site/.last_optimized'
    if File.exists? last_optimized_path
      last_optimized = File.new last_optimized_path
      file_list.exclude do |f|
        File.new(f).mtime &lt; last_optimized.mtime
      end
    end

    puts &quot;\nOptimizing #{ file_list.size } image files.&quot;

    proc_cnt = 0
    skip_cnt = 0
    savings = {:old =&gt; Array.new, :new =&gt; Array.new}

    file_list.each_with_index do |f, cnt|
      puts &quot;Processing: #{cnt+1}/#{file_list.size} #{f.to_s}&quot;

      extension = File.extname(f).delete('.').gsub(/jpeg/,'jpg')
      ext_check = `file -b #{f} | awk '{print $1}'`.strip.downcase
      ext_check.gsub!(/jpeg/,'jpg')
      if ext_check != extension
        puts &quot;\t#{f.to_s} is a: '#{ext_check}' not: '#{extension}' ..skipping&quot;
        skip_cnt = skip_cnt + 1
        next
      end

      case extension
      when 'gif'
        `gifsicle -O2 #{f} &gt; #{f}.n`
      when 'png'
        `pngcrush -q -rem alla -reduce -brute  #{f} #{f}.n`
      when 'jpg'
        `jpegtran -copy none -optimize -perfect -progressive #{f} &gt; #{f}.p`
        prog_size = File.size?(&quot;#{f}.p&quot;)

        `jpegtran -copy none -optimize -perfect #{f} &gt; #{f}.np`
        nonprog_size = File.size?(&quot;#{f}.np&quot;)

        if prog_size &lt; nonprog_size
          File.delete(&quot;#{f}.np&quot;)
          File.rename(&quot;#{f}.p&quot;, &quot;#{f}.n&quot;)
        else
          File.delete(&quot;#{f}.p&quot;)
          File.rename(&quot;#{f}.np&quot;, &quot;#{f}.n&quot;)
        end
      else
        skip_cnt = skip_cnt + 1
        next
      end

      old_size = File.size?(f).to_f
      new_size = File.size?(&quot;#{f}.n&quot;).to_f

      if new_size &lt; old_size
        File.delete(f)
        File.rename(&quot;#{f}.n&quot;, f)
      else
        new_size = old_size
        File.delete(&quot;#{f}.n&quot;)
      end

      savings[:old] &lt;&lt; old_size
      savings[:new] &lt;&lt; new_size

      reduction = 100.0 - (new_size/old_size*100.0)

      puts &quot;Output: #{sprintf &quot;%0.2f&quot;, reduction}% | #{old_size.to_i} -&gt; #{new_size.to_i}&quot;
      proc_cnt = proc_cnt + 1
    end

    total_old = savings[:old].inject(0){|sum,item| sum + item}
    total_new = savings[:new].inject(0){|sum,item| sum + item}
    total_reduction = total_old &gt; 0 ? (100.0 - (total_new/total_old*100.0)) : 0

    minutes, seconds = (Time.now - start_time).divmod 60
    puts &quot;\nTotal run time: #{minutes}m #{seconds.round}s&quot;

    puts &quot;Files: #{file_list.size}\tProcessed: #{proc_cnt}\tSkipped: #{skip_cnt}&quot;
    puts &quot;\nTotal savings:\t#{sprintf &quot;%0.2f&quot;, total_reduction}% | #{total_old.to_i} -&gt; #{total_new.to_i} (#{total_old.to_i - total_new.to_i})&quot;

    FileUtils.touch last_optimized_path
  end
end

##############
#   Minify   #
##############

desc &quot;Minify HTML&quot;
task :minify_html do
  puts &quot;## Minifying HTML&quot;
  compressor = HtmlCompressor::HtmlCompressor.new
  Dir.glob(&quot;_site/**/*.html&quot;).each do |name|
    puts &quot;Minifying #{name}&quot;
    input = File.read(name)
    output = File.open(&quot;#{name}&quot;, &quot;w&quot;)
    output &lt;&lt; compressor.compress(input)
    output.close
  end
end

desc &quot;Minify static assets&quot;
task :minify =&gt; [:minify_css, :minify_html] do
end

##############
#   Notify   #
##############

# Ping Google and Yahoo to let them know you updated your site

site = &quot;www.chrisanthropic.com&quot;

desc 'Notify Google of the new sitemap'
task :sitemapgoogle do
  begin
    require 'net/http'
    require 'uri'
    puts '* Pinging Google about our sitemap'
    Net::HTTP.get('www.google.com', '/webmasters/tools/ping?sitemap=' + URI.escape('#{site}/sitemap.xml'))
  rescue LoadError
    puts '! Could not ping Google about our sitemap, because Net::HTTP or URI could not be found.'
  end
end

desc 'Notify Bing of the new sitemap'
task :sitemapbing do
  begin
    require 'net/http'
    require 'uri'
    puts '* Pinging Bing about our sitemap'
    Net::HTTP.get('www.bing.com', '/webmaster/ping.aspx?siteMap=' + URI.escape('#{site}/sitemap.xml'))
  rescue LoadError
    puts '! Could not ping Bing about our sitemap, because Net::HTTP or URI could not be found.'
  end
end

desc &quot;Notify various services about new content&quot;
task :notify =&gt; [:sitemapgoogle, :sitemapbing] do
end
```
Now I build my site with the `bundle exec rake build` command and it automatically builds my site, minifies the assets, and optimizes all images.

When I deploy my site with `bundle exec rake deploy` it deploys it to S3 and then notifies Google and Bing about my updated sitemap.xml file.

Pretty cool.</content><author><name>Chrisanthropic</name></author><summary>I used Octopress to build my wife’s webcomic site ShamseeComic and learning how to optimize everything has been fun.</summary></entry><entry><title>Moving From Github-Pages to S3</title><link href="https://chrisanthropic.github.io/starving-artist-jekyll-theme/blog/2014/moving-from-github-pages-to-s3" rel="alternate" type="text/html" title="Moving From Github-Pages to S3" /><published>2014-12-03T00:00:00-08:00</published><updated>2014-12-03T00:00:00-08:00</updated><id>https://chrisanthropic.github.io/starving-artist-jekyll-theme/blog/2014/moving-from-github-pages-to-s3</id><content type="html" xml:base="https://chrisanthropic.github.io/starving-artist-jekyll-theme/blog/2014/moving-from-github-pages-to-s3">I decided to move from free github-pages hosting to dirt cheap AWS S3 hosting. I also decided to move my DNS from namecheap to the free CloudFlare plan. Here's the steps I took to transfer everything over.

Most of the steps were adapted from here [http://blog.mindthecloud.com/2014/08/31/create-your-static-blog-from-scratch-in-1-hour.html](http://blog.mindthecloud.com/2014/08/31/create-your-static-blog-from-scratch-in-1-hour.html)

## Prepare AWS

* Login to AWS S3 and create a bucket called `www.YOURSITE.com` (This is important for CNAME/DNS record stuff)
  * Make sure you select the `US Standard` region
* Create a new policy for the bucket that gives everyone read-only access so they can view the site

```
{
	&quot;Version&quot;: &quot;2008-10-17&quot;,
	&quot;Statement&quot;: [
		{
			&quot;Sid&quot;: &quot;AddPerm&quot;,
			&quot;Effect&quot;: &quot;Allow&quot;,
			&quot;Principal&quot;: &quot;*&quot;,
			&quot;Action&quot;: &quot;s3:GetObject&quot;,
			&quot;Resource&quot;: &quot;arn:aws:s3:::NAME-OF-BUCKET/*&quot;
		}
	]
}
```

* Select the bucket you created and choose `options`
* Go to the `Static Website Hosting` tab and enable it.
* Enter `index.html` for `index document` and `404.html` for `error document`
* Login to [AWS IAM console](https://console.aws.amazon.com/iam)
* Create new user with full access to S3
  * Create new user
  * Choose `attach user policy`
  * Choose `custom policy` and enter the following code:

```
{
  &quot;Statement&quot;: [
    {
      &quot;Action&quot;: [
        &quot;s3:*&quot;
      ],
      &quot;Effect&quot;: &quot;Allow&quot;,
      &quot;Resource&quot;: [
        &quot;arn:aws:s3:::NAME-OF-BUCKET&quot;,
        &quot;arn:aws:s3:::NAME-OF-BUCKET/*&quot;
      ]
    }
  ]
}
```

* The above policy gives the user you created full access to the bucket you created to host your site. This is the user that will be used to deploy your site.

## setup octopress-deploy

* run `octopress deploy init s3` to create default `deploy.yml` file
* Enter the user credentials in the `deploy.yml` file
* Run `octopress deploy`

## Check your work
* Go to AWS / S3, open your bucket, and choose `properties`
* There should be a link listed as `Endpoint`, go to that link and you should see your blog!

## Edit namecheap cname record
* All host records
  * @ points to `www.chrisanthropic.com` and is a `URL Redirect`
  * hostname `www` points to bucket Endpoint (rather than github.io) and is a `CNAME (Alias)`

## Remove Github site
I deleted the github version so for now only the source lives there
  * Delete master or gh-pages branch so that only the source remains

## Use Cloudflare
* Login to CloudFlare
* add your domain
  * Your CNAME and A records should be listed and 'active'
* Select the free plan, CDN only, and Medium security.

## Update your DNS Records
* Login to your DNS provider (I use Namecheap)
* Remove all other DNS providers and add the two that CloudFlare told you to</content><author><name>Chrisanthropic</name></author><summary>I decided to move from free github-pages hosting to dirt cheap AWS S3 hosting. I also decided to move my DNS from namecheap to the free CloudFlare plan. Here’s the steps I took to transfer everything over.</summary></entry><entry><title>Mail Forwarding With Mailgun and CloudFlare</title><link href="https://chrisanthropic.github.io/starving-artist-jekyll-theme/blog/2014/mail-forwarding-with-mailgun-and-cloudflare" rel="alternate" type="text/html" title="Mail Forwarding With Mailgun and CloudFlare" /><published>2014-12-03T00:00:00-08:00</published><updated>2014-12-03T00:00:00-08:00</updated><id>https://chrisanthropic.github.io/starving-artist-jekyll-theme/blog/2014/mail-forwarding-with-mailgun-and-cloudflare</id><content type="html" xml:base="https://chrisanthropic.github.io/starving-artist-jekyll-theme/blog/2014/mail-forwarding-with-mailgun-and-cloudflare">After moving my DNS from Namecheap to CloudFlare I lost the ability to use Namecheap as a mail forwarder. For anyone not sure what that is, essentially it allows you to receive email at anyname@your-domain.com and have it automatically forwarded somewhere else (like your personal Gmail account).

So, what I did is leverage a free account with [Mailgun](https://mailgun.com/) to setup the same thing.

## Mailgun Setup
* Create a Mailgun account
* Add your domain name (no www)
  `domain.com`
* Keep the page open and open a new tab to CloudFlare

## Cloudflare
* Choose your site and select `DNS Settings`
* Add the two `Text` records
* Add the `CNAME` record
  * Make sure the cloudflare cloud is gray and not orange/active
* Add the two `MX` records
  * **Name** `domain.com` (no www)
  * **Mail handled by** `mxa.mailgun.org` or `mxb.mailgun.org`

## Back at Mailgun
* Click `add`
  * Click `Check DNS Records Now`
* It'll tell you once it detects the updated DNS records

## Email Forwarding
* From Mailgun, choose `Routes`
* `Create Your First Route`
* **Priority** 10
* **Filter Expression** This is where you list the email address you want to forward to gmail
  `match_recipient(&quot;you@domain.com&quot;)`
* **Actions** This is the gmail address you want to receive your mail
  `forward(&quot;me@gmail.com&quot;)`
* **Description** Name it something so you remember what it's for

## Use Gmail to send mail from your domain
* Log in to Gmail and go to `settings`
* Go to `Accounts and Import`
* Go to `Send mail as` and select `add another email you own`
  * **name:** Anything you want
  * **email address:** name@domain.com (this should be the email you set up in the steps before)
  * Leave `treat as an alias` checked
  * Click `Next Step`
  * For the following info you'll need to login to mailgun and use the info under `Domain Information`
  * **SMTP Server** Use `SMTP Hostname` from Mailgun
  * **Username** Use `Default SMTP Login` from Mailgun
  * **Password** Use `Default Password` from Mailgun
  * Leave `Secured connection using TLS` selected
  * Click add account
* Once it's verified you should be able to compose emails and list your new email in the `from` line so nobody needs to know it's coming from your personal gmail account.</content><author><name>Chrisanthropic</name></author><summary>After moving my DNS from Namecheap to CloudFlare I lost the ability to use Namecheap as a mail forwarder. For anyone not sure what that is, essentially it allows you to receive email at anyname@your-domain.com and have it automatically forwarded somewhere else (like your personal Gmail account).</summary></entry><entry><title>Add sitemap.xml to Jekyll</title><link href="https://chrisanthropic.github.io/starving-artist-jekyll-theme/blog/2014/add-sitemap-xml-to-jekyll" rel="alternate" type="text/html" title="Add sitemap.xml to Jekyll" /><published>2014-12-03T00:00:00-08:00</published><updated>2014-12-03T00:00:00-08:00</updated><id>https://chrisanthropic.github.io/starving-artist-jekyll-theme/blog/2014/add-sitemap-xml-to-jekyll</id><content type="html" xml:base="https://chrisanthropic.github.io/starving-artist-jekyll-theme/blog/2014/add-sitemap-xml-to-jekyll">I don't like using plugins unless absolutely necessarry so I was happy to find a simple way to create a sitemap without one. The instructions are taken from this site: [http://davidensinger.com/2013/11/building-a-better-sitemap-xml-with-jekyll/](http://davidensinger.com/2013/11/building-a-better-sitemap-xml-with-jekyll/)

* Create a `sitemap.xml` file with the following content:

```
{% raw %}
---
layout: null
sitemap:
  exclude: 'yes'
---
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;urlset xmlns=&quot;http://www.sitemaps.org/schemas/sitemap/0.9&quot;&gt;
  {% for post in site.posts %}
    {% unless post.published == false %}
    &lt;url&gt;
      &lt;loc&gt;{{ site.url }}{{ post.url }}&lt;/loc&gt;
      {% if post.sitemap.lastmod %}
        &lt;lastmod&gt;{{ post.sitemap.lastmod | date: &quot;%Y-%m-%d&quot; }}&lt;/lastmod&gt;
      {% elsif post.date %}
        &lt;lastmod&gt;{{ post.date | date_to_xmlschema }}&lt;/lastmod&gt;
      {% else %}
        &lt;lastmod&gt;{{ site.time | date_to_xmlschema }}&lt;/lastmod&gt;
      {% endif %}
      {% if post.sitemap.changefreq %}
        &lt;changefreq&gt;{{ post.sitemap.changefreq }}&lt;/changefreq&gt;
      {% else %}
        &lt;changefreq&gt;monthly&lt;/changefreq&gt;
      {% endif %}
      {% if post.sitemap.priority %}
        &lt;priority&gt;{{ post.sitemap.priority }}&lt;/priority&gt;
      {% else %}
        &lt;priority&gt;0.5&lt;/priority&gt;
      {% endif %}
    &lt;/url&gt;
    {% endunless %}
  {% endfor %}
  {% for page in site.pages %}
    {% unless page.sitemap.exclude == &quot;yes&quot; %}
    &lt;url&gt;
      &lt;loc&gt;{{ site.url }}{{ page.url | remove: &quot;index.html&quot; }}&lt;/loc&gt;
      {% if page.sitemap.lastmod %}
        &lt;lastmod&gt;{{ page.sitemap.lastmod | date: &quot;%Y-%m-%d&quot; }}&lt;/lastmod&gt;
      {% elsif page.date %}
        &lt;lastmod&gt;{{ page.date | date_to_xmlschema }}&lt;/lastmod&gt;
      {% else %}
        &lt;lastmod&gt;{{ site.time | date_to_xmlschema }}&lt;/lastmod&gt;
      {% endif %}
      {% if page.sitemap.changefreq %}
        &lt;changefreq&gt;{{ page.sitemap.changefreq }}&lt;/changefreq&gt;
      {% else %}
        &lt;changefreq&gt;monthly&lt;/changefreq&gt;
      {% endif %}
      {% if page.sitemap.priority %}
        &lt;priority&gt;{{ page.sitemap.priority }}&lt;/priority&gt;
      {% else %}
        &lt;priority&gt;0.3&lt;/priority&gt;
      {% endif %}
    &lt;/url&gt;
    {% endunless %}
  {% endfor %}
&lt;/urlset&gt;
{% endraw %}
```

* Add the following configurable settings to your templates:

```
sitemap:
  lastmod: {{ date }}
  priority: 0.5
  changefreq: monthly
  exclude: 'no'
```

* More info on the settings can be found at [sitemaps.org](http://www.sitemaps.org/protocol.html) but basically
  * **lastmod** - lists the last time the page/post was modified
  * **priority** - tells web crawlers how *you* prioritize the page/post on a scale of 0.0 -1.0. 0.5 is default.
  * **changefreq** - a guideline for the webcrawler about how often the page/post likely changes (always, hourly, daily, weekly, monthly, yearly, never)
  * **exclude** - yes/no wether you want the page/post included in the sitemap.

* Sitemaps.org is very clear that web crawlers use the data as *hints* rather than commands so keep that in mind.</content><author><name>Chrisanthropic</name></author><summary>I don’t like using plugins unless absolutely necessarry so I was happy to find a simple way to create a sitemap without one. The instructions are taken from this site: http://davidensinger.com/2013/11/building-a-better-sitemap-xml-with-jekyll/</summary></entry></feed>
